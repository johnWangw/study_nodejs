{"dependencies":[{"name":"_css_loader"}],"generated":{"css":"#root {\n  margin: 75px auto;\n  width: 300px;\n  display: flex;\n  /* align-items: center; */\n  flex-direction: row;\n  overflow: hidden;\n  /* transform: rotate(45deg); */\n}\n\n#item1{\n  width: 50px;\n  height: 100px;\n  background: red;\n}\n\n#item2{\n  flex: 1;\n  height: 100px;\n  background: green;\n}\n\n/* .item {\n  width: 100px;\n  height: 100px;\n  background: red;\n  border-radius: 0 100px 0 100px;\n  margin-top: 10px;\n}\n\n#item2{\n  align-self: center;\n}\n#item3 {\n  align-self: flex-end;\n} */\n\n\n\n\n.main {\n  display: flex;\n}\n.logo {\n  width: 100px;\n  height: 100px;\n  margin: 10px;\n}\n/*\n  flex-grow 设置为1 是先按照 盒子里面内容撑宽宽度得到内容宽度1，\n  在由flex特性计算缩放宽度得到宽度2，\n  比较宽度1和2按照最大的那个确定盒子宽度，如果把宽度设置一个固定值，\n  就可以达到只按照flex缩放的计算规则来最终确定宽度\n*/\n.content {\n  flex: 1;\n  width: 0;\n}\n.content > * {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}","js":"\n        var reloadCSS = require('_css_loader');\n        module.hot.dispose(reloadCSS);\n        module.hot.accept(reloadCSS);\n      "},"hash":"74e7dcae3aa7b875d46348c1289cc01e","cacheData":{}}